
variable "vmss-linux" {
  default = {
    resource_group = {
      name     = "nix-vmss-wu2-rg"
      location = ""
      exists   = false # true
    }
    vnet = {
      name                = "hub-westus2-vnet"
      resource_group_name = "vnets-westus2-rg"
      subnet_name         = "vmpublic"
    }
    enable_availability_set = false
    enable_scale_set        = true
    vmss_nb_instances       = 2
    is_Linux_image          = false
    hostname                = "mynixclient"
    size                    = "Standard_B2ms"
    os_simple               = "RHEL"
    admin_password          = "This1SmyBestP@sswordEver"
    public_ip_dns           = [null]
    deploy_pip              = false
    allocation_method       = "Dynamic"           # or Static
    enable_ssh_key          = false               #if true fill .pub file below
    ssh_key                 = "pubkey/id_rsa.pub" #public key location "./id_rsa.pub" #
  }
}

variable "vmss-windows" {
  default = {
    resource_group = {
      name     = "win-vmss-wu2-rg"
      location = ""
      exists   = false # true
    }
    vnet = {
      name                = "hub-westus2-vnet"
      resource_group_name = "vnets-westus2-rg"
      subnet_name         = "vmpublic"
    }
    enable_availability_set = false
    enable_scale_set        = true
    vmss_nb_instances       = 2
    is_windows_image        = true
    hostname                = "mywinclient"
    size                    = "Standard_B2ms"
    os_simple               = "WindowsDesktop"
    admin_password          = "This1SmyBestP@sswordEver"
    public_ip_dns           = [null]
    deploy_pip              = true
    allocation_method       = "Dynamic" # or Static
  }
}

data "azurerm_virtual_network" "vmss-win-vnet" {
  name                = var.vmss-windows.vnet.name                # var.vnet_name
  resource_group_name = var.vmss-windows.vnet.resource_group_name # var.vnet_resource_group_name
}

data "azurerm_subnet" "vmss-win-subnet" {
  name                 = var.vmss-windows.vnet.subnet_name
  resource_group_name  = data.azurerm_virtual_network.vmss-win-vnet.resource_group_name
  virtual_network_name = data.azurerm_virtual_network.vmss-win-vnet.name
}

resource "azurerm_resource_group" "win-vmss-rg" {
  count    = var.vmss-windows.resource_group.exists == false ? 1 : 0
  name     = var.vmss-windows.resource_group.name
  location = data.azurerm_virtual_network.vmss-win-vnet.location
}

data "azurerm_key_vault" "vmss-kv" {
  name                = "santana-uw-kv-d"
  resource_group_name = "Management"
}

data "azurerm_key_vault_certificate" "vmss-kv" {
  name         = "vm-nix-cert"
  key_vault_id = data.azurerm_key_vault.vmss-kv.id
}

data "azurerm_virtual_network" "vmss-nix-vnet" {
  name                = var.vmss-linux.vnet.name                # var.vnet_name
  resource_group_name = var.vmss-linux.vnet.resource_group_name # var.vnet_resource_group_name
}

data "azurerm_subnet" "vmss-nix-subnet" {
  name                 = var.vmss-linux.vnet.subnet_name
  resource_group_name  = data.azurerm_virtual_network.vmss-nix-vnet.resource_group_name
  virtual_network_name = data.azurerm_virtual_network.vmss-nix-vnet.name
}

resource "azurerm_resource_group" "vmss-nix-rg" {
  count    = var.vmss-linux.resource_group.exists == false ? 1 : 0
  name     = var.vmss-linux.resource_group.name
  location = data.azurerm_virtual_network.vmss-nix-vnet.location
}

module "win-vmss" {
  source                  = "./vm-module"
  enable_availability_set = var.vmss-windows.enable_availability_set
  #enable_scale_set        = var.vmss-windows.enable_scale_set
  #vmss_nb_instances       = var.vmss-windows.vmss_nb_instances

  nb_instances        = 1
  resource_group_name = azurerm_resource_group.win-vmss-rg[0].name
  is_windows_image    = var.vmss-windows.is_windows_image
  vm_hostname         = var.vmss-windows.hostname // line can be removed if only one VM module per resource group
  vm_size             = var.vmss-windows.size
  admin_password      = var.vmss-windows.admin_password
  vm_os_simple        = var.vmss-windows.os_simple
  public_ip_dns       = var.vmss-windows.public_ip_dns
  vnet_subnet_id      = data.azurerm_subnet.vmss-win-subnet.id
  deploy_pip          = var.vmss-windows.deploy_pip
  allocation_method   = var.vmss-windows.allocation_method #"Dynamic" # or Static
  depends_on          = [azurerm_resource_group.win-vmss-rg]
}

module "nix-vmss" {
  source                  = "./vm-module"
  enable_availability_set = var.vmss-linux.enable_availability_set
  #enable_scale_set        = var.vmss-linux.enable_scale_set
  #vmss_nb_instances       = var.vmss-linux.vmss_nb_instances

  nb_instances        = 2
  vm_hostname         = var.vmss-linux.hostname
  vm_size             = var.vmss-linux.size
  resource_group_name = azurerm_resource_group.vmss-nix-rg[0].name
  vm_os_simple        = var.vmss-linux.os_simple
  admin_password      = var.vmss-linux.admin_password
  public_ip_dns       = var.vmss-linux.public_ip_dns
  vnet_subnet_id      = data.azurerm_subnet.vmss-nix-subnet.id
  deploy_pip          = var.vmss-linux.deploy_pip
  allocation_method   = var.vmss-linux.allocation_method #"Dynamic" # or Static
  ssh_key             = var.vmss-linux.ssh_key           #data.azurerm_key_vault_certificate.vmss-kv.certificate_data_base64 #

  depends_on = [azurerm_resource_group.vmss-nix-rg]
}


output "windows_vmss" {
  description = "Virtual machine ids created."
  value = var.windows-vm.enable_scale_set == true ? [
    { for vm in module.windowsservers.vmss :
      "name_${vm.name}" => "name:${vm.location}, vm_prefixes:${vm.computer_name_prefix}} instances:${vm.instances}}, name:${vm.id}"
    },
    { for vm in module.windowsservers.vmss :
      vm.name => "rg:${vm.resource_group_name}"
    },
    { msi = [for msi in module.windowsservers.vmss.*.identity :
      msi]
    }
  ] : null
}

output "linux_vmss" {
  description = "Virtual machine ids created."
  value = var.windows-vm.enable_scale_set == true ? [
    { for vm in module.linuxservers.vmss :
      "name_${vm.name}" => "name:${vm.location}, vm_prefixes:${vm.computer_name_prefix}} instances:${vm.instances}}, name:${vm.id}"
    },
    { for vm in module.linuxservers.vmss :
      vm.name => "rg:${vm.resource_group_name}"
    },
    { msi = [for msi in module.linuxservers.vmss.*.identity :
      msi]
    }
  ] : null
}

/*
output "vmss" {
  description = "Virtual machine ids created."
  value       = var.windows-vm.enable_scale_set == true ? concat(module.windowsservers.vmss, module.linuxservers.vmss) :null # "no_scale_sets_deployed" 
}
*/